# -*- coding: utf-8 -*-
"""Task1_Supervised_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bDXWr1_bSRuzw1PgkfxOP8MeDZuVUcop

**Data Science And Business Analytics tasks**

---



**Author**: Ben Mansour Houcem Eddine


---



**TASK 1: Predict the percentage of an student based on the no. of study hours**

**import libraries**
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

"""**read the data**"""

data= pd.read_csv("http://bit.ly/w-data")
data.head()

"""**data preprocessing**"""

print(data.describe())

# count the number of nan values in each column
print(data.isnull().sum())

"""**Plotting The variation of scores in hours study**"""

fig = plt.figure(figsize=(15,1))
data.plot(x='Hours', y='Scores', style='*')  
plt.title('les scores en fonction de heures')  
plt.xlabel('Hours Studied')  
plt.ylabel('Score')  
plt.show()

"""**here i create two variable hours and scores** 


---


**hours** contain column hours 


---


**scores** contain column scores
"""

hours=data['Hours']
scores=data['Scores']

"""**transform the two variable into array X for data and Y for label**"""

X=np.array(hours)
Y=np.array(scores)

X

Y

"""**As we can see here the X and Y variable are in Row now we will put them in column using reshape**"""

X=X.reshape(-1,1)
Y=Y.reshape(-1,1)

X

"""**here we will split dataset into train and test 2/3 train 1/3 test**"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, Y, 
                            test_size=0.33, random_state=0)

"""**now we applied the simple linearRegression algorithme to train the model because we have one variable hours**"""

from sklearn.linear_model import LinearRegression
model=LinearRegression()
#using time library to chek the time nedded the algorithme to train 
import time
debut=time.time()
model.fit(X_train,y_train)
fin=time.time()-debut
print("the time nedded to finish the train is ",fin,"s")

"""**Now we will create two variable a and b** 

---
**a**: for model.coef_ 

---
**b**: for .intercept_

#y=ax+b
"""

a=model.coef_ 
print(a)

b=model.intercept_
print(b)

"""**Now we will make prediction using X_test**"""

pred=model.predict(X_test)
pred

# Comparing between y_actual and y_pred
df = np.concatenate((y_test,pred),axis=1)
df=pd.DataFrame(df)
df. rename(columns = {0:'y_actual', 1:'y_pred'}, inplace = True)
print(df)

"""after prediction we will calculate the error using RMSE metrics"""

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,pred)
import math
print('RMSE', math.sqrt(mse))

"""Now we use EV to calculate the accuracy of the model"""

from sklearn.metrics import explained_variance_score
EV=explained_variance_score(y_test, pred)
print("Explained variance: %f" % (EV*100))

"""here i create a line using pred1=a*X+b"""

pred1=a*X+b

pred1

plt.scatter(X,Y)
plt.plot(X,pred1,color="green")
plt.xlabel("hours")
plt.ylabel("scores")

"""**Finnaly we predicted the score if a student studies for 9.25 hrs/day**"""

result=model.predict([[9.25]])

print("the predicted predicted score if a student studies for 9.25 hrs/day is",result[0][0])

"""#***Hope you enjoy it***

"""